# coding:utf-8
from pwn import *

context.log_level = 'debug'

proc_name = './b00ks'
libc = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')
elf = ELF(proc_name)

islocal = 1
if islocal:
    p = process(proc_name)
else:
    p = remote('node4.buuoj.cn', 26809)

def debug(addr, PIE=True):
    if PIE:
        text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(p.pid)).readlines()[1], 16)
        gdb.attach(p,'b *{}'.format(hex(text_base+addr)))
    else:
        gdb.attach(p,"b *{}".format(hex(addr)))


def set_author_name():
	p.sendlineafter("name: ", "klose")

def create_book(name_size, name, des_size, description):
	p.sendlineafter("> ", "1")
	p.sendlineafter("Enter book name size: ", str(name_size))
	p.sendlineafter("Enter book name (Max 32 chars): ", "aaaa")
	p.sendlineafter("Enter book description size: ", str(des_size))
	p.sendlineafter("Enter book description: ", description)

def delete_book(id):
	p.sendlineafter("> ", "2")
	p.sendlineafter("Enter the book id you want to delete: ", str(id))

def edit_book(id, new_description):
	p.sendlineafter("> ", "3")
	p.sendlineafter("Enter the book id you want to edit: ", str(id))
	p.sendlineafter("Enter new book description: ", new_description)

def print_book(id):
	p.sendlineafter("> ", "4")
	for i in range(id):
		p.recvuntil(": ")
		book_id = int(p.recvuntil('\n', drop="True")[:-1])
		p.recvuntil(": ")
		book_name = p.recvuntil('\n', drop="True")[:-1]
		p.recvuntil(": ")
		book_description = p.recvuntil('\n', drop="True")[-1]
		p.recvuntil(": ")
		book_author = p.recvuntil('\n', drop="True")[-1]
	return book_id, book_name, book_description, book_author

def change_author_name(new_author_name):
	p.sendlineafter("> ", "5")
	p.sendlineafter("name: ", new_author_name)

def pwn():
	set_author_name()
	create_book(0x10, 'aaaa', 0x10, 'bbbb')
	debug(0)
	pause()

if __name__ == '__main__':
	pwn()
